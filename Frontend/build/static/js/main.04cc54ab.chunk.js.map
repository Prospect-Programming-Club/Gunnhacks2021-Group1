{"version":3,"sources":["logo.svg","api/retrieveUUID.js","api/sendMessage.js","App.js","reportWebVitals.js","index.js"],"names":["storeData","value","a","AsyncStorage","setItem","JSON","stringify","console","log","getData","getItem","fetch","serverURL","method","then","response","json","data","Promise","resolve","reject","catch","e","test","Input","props","disable","state","disabled","handleClick","bind","checkMessageCreated","setState","this","id","type","placeholder","onClick","React","Component","App","apiResponse","res","text","err","headers","body","result","info","checkForUUID","callAPI","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04cc54ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { serverURL } from '../index'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst storeData = async (value) => {\r\n    try {\r\n        await AsyncStorage.setItem('@UUID', JSON.stringify(value));\r\n        return JSON.stringify(value);\r\n    } catch (e) {\r\n        console.log(\"Error writing UUID: \" + e)\r\n    }\r\n}\r\n\r\nexport async function checkForUUID() {\r\n    \r\n    const getData = async () => {\r\n        try {\r\n            const value = await AsyncStorage.getItem('@UUID')\r\n            if(value !== null) {\r\n                return value;\r\n            }else{\r\n                fetch(serverURL + '/uuidAPI', {\r\n                    method: 'POST'\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    storeData(data);\r\n                })\r\n                    \r\n            }\r\n        } catch(e) {\r\n            console.log(\"Error reading UUID: \" + e)\r\n        }\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        getData().then((response) => {\r\n            resolve(response);\r\n        }).catch((e) => {\r\n            reject();\r\n        });\r\n        \r\n    })\r\n    \r\n}\r\n","import { serverURL } from '../index'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport const storeData = async (value) => {\r\n    try {\r\n        await AsyncStorage.setItem('@MessageCreated', value);\r\n        return JSON.stringify(value);\r\n    } catch (e) {\r\n        console.log(\"Error writing UUID: \" + e)\r\n    }\r\n}\r\n\r\nexport async function checkMessageCreated(){\r\n    const getData = async () => {\r\n        try {\r\n            const value = await AsyncStorage.getItem('@MessageCreated');\r\n            if(value != null){\r\n                return value;\r\n            }else{\r\n                return \"false\";\r\n            }\r\n        } catch(e) {\r\n            console.log(\"Error reading MessageCreated: \" + e);\r\n        }\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        getData().then((response) => {\r\n            resolve(response);\r\n        }).catch((e) => {\r\n            reject();\r\n        });   \r\n    })\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport { serverURL } from './index'\r\nimport { checkForUUID } from './api/retrieveUUID'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { checkMessageCreated, storeData } from './api/sendMessage';\r\n\r\nvar test = {\"text\": \"hello\"};\r\n\r\n\r\n    \r\n// var clearAsyncStorage = async() => {\r\n//   AsyncStorage.clear();\r\n// }\r\n// clearAsyncStorage();\r\n\r\n\r\nclass Input extends React.Component {\r\n  disable = \"\";\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { disabled: this.disable }\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\ncomponentDidMount(){\r\n  checkMessageCreated().then(response => {\r\n    this.disable = response == \"true\"\r\n    this.setState({ disabled: this.disable })\r\n  });\r\n}\r\n\r\n  handleClick(e) {\r\n    this.setState({\r\n      disabled: true\r\n    });\r\n    storeData(\"true\");\r\n  }\r\n  render() {\r\n    return(\r\n      <span id=\"bottom_bar\" ><nobr>\r\n        <input type=\"text\" placeholder=\"Enter value\" id=\"input_box\" disabled={(this.state.disabled)? \"disabled\" : \"\"}/>\r\n        <button id=\"send_button\" onClick={this.handleClick}>\r\n            <span id=\"send_button_text\">\r\n              &gt;\r\n            </span>\r\n        </button>\r\n      </nobr></span>\r\n    );\r\n  }\r\n};\r\n\r\nclass App extends React.Component{\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      apiResponse: \"\"\r\n    };\r\n  }\r\n\r\n  callAPI() {\r\n    fetch(serverURL + \"/testAPI\")\r\n        .then(res => res.text())\r\n        .then(res => this.setState({ apiResponse: res }))\r\n        .catch(err => err);\r\n    \r\n      \r\n    fetch(serverURL + \"/messageAPI\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json' // The type of data you're sending\r\n      },\r\n      body: JSON.stringify(test)\r\n    }).then((result) => result.text())\r\n    .then((info) => { console.log(info); });\r\n  }\r\n\r\n  componentDidMount() {\r\n    checkForUUID().then((response) => console.log(response));\r\n    //checkMessageCreated().then((response) => Input.state.disabled = response)\r\n    this.callAPI();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        <div id=\"header\">\r\n            <span className=\"title\" id=\"title_one\">\r\n                ONE\r\n            </span>\r\n            <h1>\r\n                <span className=\"title\">\r\n                    MESSAGE\r\n                </span>\r\n            </h1>\r\n            <nav>\r\n            </nav>\r\n        </div>\r\n        <div id=\"content\">\r\n          <Input></Input>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst serverURL = \"http://localhost:1337\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nexport { serverURL };"],"sourceRoot":""}